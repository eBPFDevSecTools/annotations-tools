command : python3 query_12c.py --func ingress_node_firewall_main

FCG of function ingress_node_firewall_main

Function Name :  ingress_node_firewall_main
Comments  {'Human': '', 'AI': '', 'Developer': [{'start_line': 395, 'text': ' * ingress_node_firewall_main(): is the entry point for the XDP program to do * ingress node firewall. * Input: * struct xdp_md *ctx: pointer to XDP context which contains packet pointer and input interface index. * Output: * none. * Return: * int XDP action: valid values XDP_DROP and XDP_PASS. ', 'end_line': 404}]}

Function Name :  ipv4_firewall_lookup
Comments  {'Human': '', 'AI': '', 'Developer': [{'start_line': 176, 'text': " * ipv4_firewall_lookup(): matches ipv4 packet with LPM map's key, * match L4 headers with the result rules in order and return the action. * if there is no match it will return UNDEF action. * Input: * struct xdp_md *ctx: pointer to XDP context which contains packet pointer and input interface index. * __u32 ifID: ingress interface index where the packet is received from. * Output: * none. * Return: * __u32 action: returned action is the logical or of the rule id and action field * from the matching rule, in case of no match it returns UNDEF. ", 'end_line': 188}, {'start_line': 207, 'text': ' ipv4 address + ifId', 'end_line': 207}, {'start_line': 251, 'text': ' Protocol is not set so just apply the action', 'end_line': 251}]}

Function Name :  generate_event_and_update_statistics
Comments  {'Human': '', 'AI': '', 'Developer': [{'start_line': 339, 'text': ' * generate_event_and_update_statistics() : it will generate eBPF event including the packet header * and update statistics for the specificed rule id. * Input: * struct xdp_md *ctx: pointer to XDP context including input interface and packet pointer. * __u64 packet_len: packet length in bytes including layer2 header. * __u8 action: valid actions ALLOW/DENY/UNDEF. * __u16 ruleId: ruled id where the packet matches against (in case of match of course). * __u8 generateEvent: need to generate event for this packet or not. * __u32 ifID: input interface index where the packet is arrived from. * Output: * none. * Return: * none. ', 'end_line': 353}, {'start_line': 387, 'text': ' enable the following flag to dump packet header', 'end_line': 387}]}
Function Name :  ipv6_firewall_lookup
Comments  {'Human': '', 'AI': '', 'Developer': [{'start_line': 261, 'text': " * ipv6_firewall_lookup(): matches ipv6 packet with LPM map's key, * match L4 headers with the result rules in order and return the action. * if there is no rule match it will return UNDEF action. * Input: * struct xdp_md *ctx: pointer to XDP context which contains packet pointer and input interface index. * __u32 ifID: ingress interface index where the packet is received from. * Output: * none. * Return: __u32 action: returned action is the logical or of the rule id and action field * from the matching rule, in case of no match it returns UNDEF. ", 'end_line': 273}, {'start_line': 290, 'text': ' ipv6 address _ ifId', 'end_line': 290}, {'start_line': 329, 'text': ' Protocol is not set so just apply the action', 'end_line': 329}]}
Function Name :  ip_extract_l4info
Comments  {'Human': '', 'AI': '', 'Developer': [{'start_line': 1, 'text': ' +build ignore', 'end_line': 1}, {'start_line': 22, 'text': ' FIXME: Hack this structure defined in linux/sctp.h however I am getting incomplete type when I reference it', 'end_line': 22}, {'start_line': 30, 'text': ' * ingress_node_firewall_events_map: is perf event array map type * key is the rule id, packet header is captured and used to generate events. ', 'end_line': 33}, {'start_line': 41, 'text': ' * ingress_node_firewall_statistics_map: is per cpu array map type * key is the rule id * user space collects statistics per CPU and aggregate them. ', 'end_line': 45}, {'start_line': 48, 'text': ' ruleId', 'end_line': 48}, {'start_line': 53, 'text': ' * ingress_node_firewall_table_map: is LPM trie map type * key is the ingress interface index and the sourceCIDR. * lookup returns an array of rules with actions for the XDP program * to process. * Note: this map is pinned to specific path in bpffs. ', 'end_line': 59}, {'start_line': 69, 'text': ' * ingress_node_firewall_printk: macro used to generate prog traces for debugging only * to enable uncomment the following line ', 'end_line': 72}, {'start_line': 73, 'text': '#define ENABLE_BPF_PRINTK', 'end_line': 73}, {'start_line': 80, 'text': " * ip_extract_l4info(): extracts L4 info for the supported protocols from * the incoming packet's headers. * Input: * struct xdp_md *ctx: pointer to XDP context which contains packet pointer and input interface index. * bool is_v4: true for ipv4 and false for ipv6. * Output: * __u8 *proto: L4 protocol type supported types are TCP/UDP/SCTP/ICMP/ICMPv6. * __u16 *dstPort: pointer to L4 destination port for TCP/UDP/SCTP protocols. * __u8 *icmpType: pointer to ICMP or ICMPv6's type value. * __u8 *icmpCode: pointer to ICMP or ICMPv6's code value. * Return: * 0 for Success. * -1 for Failure. ", 'end_line': 94}]}
Function Name :  ip_extract_l4info
Comments  {'Human': '', 'AI': '', 'Developer': [{'start_line': 1, 'text': ' +build ignore', 'end_line': 1}, {'start_line': 22, 'text': ' FIXME: Hack this structure defined in linux/sctp.h however I am getting incomplete type when I reference it', 'end_line': 22}, {'start_line': 30, 'text': ' * ingress_node_firewall_events_map: is perf event array map type * key is the rule id, packet header is captured and used to generate events. ', 'end_line': 33}, {'start_line': 41, 'text': ' * ingress_node_firewall_statistics_map: is per cpu array map type * key is the rule id * user space collects statistics per CPU and aggregate them. ', 'end_line': 45}, {'start_line': 48, 'text': ' ruleId', 'end_line': 48}, {'start_line': 53, 'text': ' * ingress_node_firewall_table_map: is LPM trie map type * key is the ingress interface index and the sourceCIDR. * lookup returns an array of rules with actions for the XDP program * to process. * Note: this map is pinned to specific path in bpffs. ', 'end_line': 59}, {'start_line': 69, 'text': ' * ingress_node_firewall_printk: macro used to generate prog traces for debugging only * to enable uncomment the following line ', 'end_line': 72}, {'start_line': 73, 'text': '#define ENABLE_BPF_PRINTK', 'end_line': 73}, {'start_line': 80, 'text': " * ip_extract_l4info(): extracts L4 info for the supported protocols from * the incoming packet's headers. * Input: * struct xdp_md *ctx: pointer to XDP context which contains packet pointer and input interface index. * bool is_v4: true for ipv4 and false for ipv6. * Output: * __u8 *proto: L4 protocol type supported types are TCP/UDP/SCTP/ICMP/ICMPv6. * __u16 *dstPort: pointer to L4 destination port for TCP/UDP/SCTP protocols. * __u8 *icmpType: pointer to ICMP or ICMPv6's type value. * __u8 *icmpCode: pointer to ICMP or ICMPv6's code value. * Return: * 0 for Success. * -1 for Failure. ", 'end_line': 94}]}